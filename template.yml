AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''
  ComeInRequestTemplate:
    Type: String
    Description: request-template
    Default: |
      #set($allParams = $input.params())
      {
      "body" : $input.json('$'),
      "path" : "$context.resourcePath",
      "profile":{
         "email" : "$context.authorizer.claims.email",
         "comein_id":"$context.authorizer.claims['custom:comein_id']",
         "sub":"$context.authorizer.claims.sub"
        },
      "params" : {
      #foreach($type in $allParams.keySet())
          #set($params = $allParams.get($type))
      "$type" : {
          #foreach($paramName in $params.keySet())
          "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      }
          #if($foreach.hasNext),#end
      #end
      },
      "stage-variables" : {
      #foreach($key in $stageVariables.keySet())
      "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
          #if($foreach.hasNext),#end
      #end
      },
      "context" : {
          "account-id" : "$context.identity.accountId",
          "api-id" : "$context.apiId",
          "api-key" : "$context.identity.apiKey",
          "authorizer-principal-id" : "$context.authorizer.principalId",
          "caller" : "$context.identity.caller",
          "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
          "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
          "cognito-identity-id" : "$context.identity.cognitoIdentityId",
          "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
          "http-method" : "$context.httpMethod",
          "stage" : "$context.stage",
          "source-ip" : "$context.identity.sourceIp",
          "user" : "$context.identity.user",
          "user-agent" : "$context.identity.userAgent",
          "user-arn" : "$context.identity.userArn",
          "request-id" : "$context.requestId",
          "resource-id" : "$context.resourceId",
          "resource-path" : "$context.resourcePath"
          }
      }
    
    

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole

Resources:
  ComeInRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      # Body:
        # OpenAPI specification: null
      Description: A test API
      Name: MyRestAPI
  
  ComeInGateWayHttpResponse:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ContentType: application/json
      Description: Schema for Http Response of GateWayAPI
      Name: GateWayHttpResponse
      Schema: |
        {
          "$schema" : "http://json-schema.org/draft-04/schema#",
          "type" : "object",
          "required" : [ "code" ],
          "properties" : {
            "code" : {
              "type" : "string"
            }
          },
          "title" : "Response Schema"
        }
        
      
  ComeInDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - GetHelloWorldMethod
    Properties:
      RestApiId: !Ref ComeInRestApi
      
  ListBookingByEmailDeploymentTest:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - ListBookingByEmailMethodTest
    Properties:
      RestApiId: !Ref ComeInRestApi    

    
  #ProdStage:
    #Type: AWS::ApiGateway::Stage
    #Properties:
      #StageName: Prod
      #RestApiId: !Ref ComeInRestApi
      #DeploymentId: !Ref ComeInDeployment
  
  DevStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Dev
      RestApiId: !Ref ComeInRestApi
      DeploymentId: !Ref ComeInDeployment
   
  ComeInAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:  
      Name: comein_authorizer
      Type: COGNITO_USER_POOLS
      RestApiId: !Ref ComeInRestApi
      IdentitySource: method.request.header.comein_auth
      ProviderARNs: [ 'arn:aws:cognito-idp:ap-southeast-1:091340909384:userpool/ap-southeast-1_sH5GQOfGD' ]
  
  ListBookingByEmailResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !GetAtt 
        - ComeInRestApi
        - RootResourceId
      PathPart: hotel-bookings
      
  ListBookingByEmailResourceTest:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !GetAtt 
        - ComeInRestApi
        - RootResourceId
      PathPart: test-hotel-bookings
  
  ListBookingByEmailMethodTest:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref ListBookingByEmailResourceTest
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt ListBookingByEmail.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json' : !Ref ComeInRequestTemplate
        IntegrationResponses: 
          - StatusCode: 200  
      MethodResponses:
        - StatusCode: 200         
              
  ListBookingByEmailMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref ListBookingByEmailResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt ListBookingByEmail.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json' : !Ref ComeInRequestTemplate
        IntegrationResponses:
          - StatusCode: 200  
     #     ResponseTemplates: 
     #       'application/json':''
      MethodResponses:
        - StatusCode: 200
       # ResponseModels:
       #   'application/json':'GateWayHttpResponse'
        
 
  PostHelloWorldMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !GetAtt 
        - ComeInRestApi
        - RootResourceId
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt GetHelloWorld.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json' : !Ref ComeInRequestTemplate
  
  GetHelloWorldMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !GetAtt 
        - ComeInRestApi
        - RootResourceId
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt GetHelloWorld.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': |
            #set($allParams = $input.params())
            {
            "body" : $input.json('$'),
            "path" : "$context.resourcePath",
            "profile":{
               "email" : "$context.authorizer.claims.email",
               "comein_id":"$context.authorizer.claims['custom:comein_id']",
               "sub":"$context.authorizer.claims.sub"
              }
            "params" : {
            #foreach($type in $allParams.keySet())
                #set($params = $allParams.get($type))
            "$type" : {
                #foreach($paramName in $params.keySet())
                "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                    #if($foreach.hasNext),#end
                #end
            }
                #if($foreach.hasNext),#end
            #end
            },
            "stage-variables" : {
            #foreach($key in $stageVariables.keySet())
            "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                #if($foreach.hasNext),#end
            #end
            },
            "context" : {
                "account-id" : "$context.identity.accountId",
                "api-id" : "$context.apiId",
                "api-key" : "$context.identity.apiKey",
                "authorizer-principal-id" : "$context.authorizer.principalId",
                "caller" : "$context.identity.caller",
                "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                "http-method" : "$context.httpMethod",
                "stage" : "$context.stage",
                "source-ip" : "$context.identity.sourceIp",
                "user" : "$context.identity.user",
                "user-agent" : "$context.identity.userAgent",
                "user-arn" : "$context.identity.userArn",
                "request-id" : "$context.requestId",
                "resource-id" : "$context.resourceId",
                "resource-path" : "$context.resourcePath"
                }
            }

  ListBookingByEmail:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-ListBookingByEmail'
      Handler: com.r2dsolution.comein.lambda.handler.ListBookingByEmailHandler
      Runtime: java11
      Timeout: 30
      MemorySize: 512
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn      
      Events: 
        ListBookingByEmailApiEvent:
          Type: Api
          Properties:
              Method: post
              Path: /test-hotel-bookings
              RestApiId: 
                Ref: !Ref ComeInRestApi
              Auth:
                ResourcePolicy:
                  CustomStatements: [{
                             "Effect": "Allow",
                             "Principal": "apigateway.amazonaws.com",
                             "Action": "lambda:InvokeFunction",
                             "Condition": {
                               "ArnLike": {
                                 "AWS:SourceArn": "arn:aws:execute-api:ap-southeast-1:091340909384:mr6dlh581i/*/POST/test-hotel-bookings"
                               }
                             }
                           }]   
    
  GetHelloWorld:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-GetHelloWorld'
      Handler: com.aws.codestar.projecttemplates.handler.HelloWorldHandler
      Runtime: java11
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  
  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-Execution${Stage}'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'
