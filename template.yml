AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole

Resources:
  ComeInRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      # Body:
        # OpenAPI specification: null
      Description: A test API
      Name: MyRestAPI
      
  ComeInDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - GetHelloWorldMethod
    Properties:
      RestApiId: !Ref ComeInRestApi
      #Description: My deployment
      #StageName: DummyStage
    
  #ProdStage:
    #Type: AWS::ApiGateway::Stage
    #Properties:
      #StageName: Prod
      #RestApiId: !Ref ComeInRestApi
      #DeploymentId: !Ref ComeInDeployment
  
  DevStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Dev
      RestApiId: !Ref ComeInRestApi
      DeploymentId: !Ref ComeInDeployment
   
  ComeInAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:  
      Name: comein_authorizer
      Type: COGNITO_USER_POOLS
      RestApiId: !Ref ComeInRestApi
      IdentitySource: method.request.header.comein_auth
      ProviderARNs: [ 'arn:aws:cognito-idp:ap-southeast-1:091340909384:userpool/ap-southeast-1_sH5GQOfGD' ]
  
  GetHelloWorldMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !GetAtt 
        - ComeInRestApi
        - RootResourceId
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        uri: 
          Fn::GetAtt:
          - GetHelloWorld
          - Arn
  
  GetHelloWorld:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-GetHelloWorld'
      Handler: com.aws.codestar.projecttemplates.handler.HelloWorldHandler
      Runtime: java11
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            #Auth:
              #Authorizer: 
  
  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-Execution${Stage}'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'
